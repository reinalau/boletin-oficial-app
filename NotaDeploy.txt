#1
.\build_layer_docker.ps1

#2
.\build_lambda_only.bat


#3
cd scripts\iac; terraform init
cd scripts\iac;terraform validate
cd scripts\iac;terraform plan -var-file="terraform.tfvars"
cd scripts\iac; terraform apply -var-file="terraform.tfvars" -auto-approve

--------------------------

para probar el frontend pegar url:
frontend/js/api.js - Cliente API principal
frontend/test.html - P√°gina de prueba principal
frontend/test-simple.js - Script de prueba simple
frontend/debug-test.html - P√°gina de debug


‚úÖ Deployment completado con √©xito:
Lambda Layer: Versi√≥n 2 con dependencias compiladas para Linux
Lambda Function: Actualizada para usar el nuevo layer
API Gateway: Funcionando en https://uu3c5q9pu4.execute-api.us-east-1.amazonaws.com/v1/analyze
üß™ Ahora puedes probar la Lambda:
En AWS Console:
Ve a AWS Lambda Console
Abre: boletin-oficial-analyzer
Usa el payload que te recomend√©:
{
  "httpMethod": "POST",
  "headers": {
    "Content-Type": "application/json",
    "User-Agent": "AWS-Console-Test/1.0"
  },
  "body": "{}",
  "queryStringParameters": null,
  "pathParameters": null,
  "requestContext": {
    "identity": {
      "sourceIp": "127.0.0.1"
    }
  }
}
O desde API Gateway:
Tambi√©n puedes probar directamente el endpoint:

POST https://uu3c5q9pu4.execute-api.us-east-1.amazonaws.com/v1/analyze
Con body:

{
  "fecha": "2024-12-15",
  "forzar_reanalisis": false
}
üîç Qu√© cambi√≥:
‚úÖ Dependencias Linux: pydantic_core ahora compilado para Linux
‚úÖ Layer separado: Dependencias en layer, c√≥digo en funci√≥n
‚úÖ Tama√±o optimizado: Funci√≥n solo 17KB, layer 5.8MB
