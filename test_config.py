#!/usr/bin/env python3
"""
Test script to verify configuration is working correctly
"""

import os
from dotenv import load_dotenv

# Load .env file
load_dotenv()

print("üß™ Testing Configuration")
print("=" * 50)

# Test environment variables
print("\nüìã Environment Variables:")
print(f"GEMINI_API_KEY: {'‚úÖ Set' if os.getenv('GEMINI_API_KEY') else '‚ùå Missing'}")
print(f"MONGODB_CONNECTION_STRING: {'‚úÖ Set' if os.getenv('MONGODB_CONNECTION_STRING') else '‚ùå Missing'}")
print(f"MONGODB_DATABASE: {os.getenv('MONGODB_DATABASE', '‚ùå Missing')}")
print(f"MONGODB_COLLECTION: {os.getenv('MONGODB_COLLECTION', '‚ùå Missing')}")

# Test config service
print("\nüîß Testing Config Service:")
try:
    from services.config_service import config_service
    
    # Load configuration
    config = config_service.load_config()
    print("‚úÖ Config service loaded successfully")
    
    # Test LLM config
    llm_config = config_service.get_llm_config()
    print(f"‚úÖ LLM API Key: {'Set' if llm_config['api_key'] else 'Missing'}")
    print(f"‚úÖ LLM Model: {llm_config['model']}")
    print(f"‚úÖ LLM Temperature: {llm_config['temperature']}")
    
    # Test MongoDB config
    mongo_config = config_service.get_mongodb_config()
    print(f"‚úÖ MongoDB Database: {mongo_config['database']}")
    print(f"‚úÖ MongoDB Collection: {mongo_config['collection']}")
    
except Exception as e:
    print(f"‚ùå Config service error: {e}")

# Test LLM service initialization
print("\nü§ñ Testing LLM Service:")
try:
    from services.llm_service_direct import LLMAnalysisServiceDirect
    
    llm_service = LLMAnalysisServiceDirect()
    print("‚úÖ LLM service initialized successfully")
    
except Exception as e:
    print(f"‚ùå LLM service error: {e}")

print("\nüéâ Configuration test completed!")